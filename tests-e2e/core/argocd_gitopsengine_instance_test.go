package core

import (
	"context"
	"fmt"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/redhat-appstudio/managed-gitops/backend-shared/db"
	"github.com/redhat-appstudio/managed-gitops/backend/util"
	"github.com/redhat-appstudio/managed-gitops/tests-e2e/fixture"
	"github.com/redhat-appstudio/managed-gitops/tests-e2e/fixture/k8s"
	apps "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

var _ = Describe("ArgoCD instance via GitOpsEngineInstance Operations Test", func() {

	const (
		newArgoCDNamespaceName = "gitops-service-argocd"
	)

	Context("ArgoCD instance gets created from an operation's gitopsEngineInstance resource-type", func() {

		BeforeEach(func() {
			By("Delete old namespaces, and kube-system resources")
			Expect(fixture.EnsureCleanSlate()).To(Succeed())

		})

		It("ensures that a standalone ArgoCD gets created successfully when an operation CR of resource-type GitOpsEngineInstance is created", func() {

			if fixture.IsRunningAgainstKCP() {
				Skip("Skipping this test until we support running gitops operator with KCP")
			}

			dbq, err := db.NewUnsafePostgresDBQueries(true, true)
			Expect(err).To(BeNil())
			defer dbq.CloseDatabase()
			err = db.SetupForTestingDBGinkgo()
			Expect(err).To(BeNil())

			k8sClient, err := fixture.GetE2ETestUserWorkspaceKubeClient()
			Expect(err).To(Succeed())

			testClusterUser := &db.ClusterUser{
				Clusteruser_id: "test-user",
				User_name:      "test-user",
			}
			ctx := context.Background()
			log := log.FromContext(ctx)

			By("Creating gitopsengine cluster,cluster user and namespace")

			newArgoCDNamespace := &corev1.Namespace{
				ObjectMeta: metav1.ObjectMeta{
					Name: newArgoCDNamespaceName,
				},
			}
			fmt.Println("TTTTTTTTTTTT1")
			err = k8sClient.Create(ctx, newArgoCDNamespace)
			Expect(err).To(BeNil())
			fmt.Println("TTTTTTTTTTTT2")

			err = util.CreateNewArgoCDInstance(ctx, newArgoCDNamespace, *testClusterUser, k8sClient, log, dbq)
			Expect(err).To(BeNil())
			fmt.Println("TTTTTTTTTTTT3")

			By("ensuring ArgoCD service resource exists")
			argocdInstance := &apps.Deployment{
				ObjectMeta: metav1.ObjectMeta{Name: newArgoCDNamespace.Name + "-server", Namespace: newArgoCDNamespace.Name},
			}

			Eventually(argocdInstance, "10m", "5s").Should(k8s.ExistByName(k8sClient), "Argo CD server Deployment should exist")

		})
	})
})

// func unsafeCleanDBWhereIDisAutoGenerated() error {
// 	ctx := context.Background()

// 	// 'testSetup' deletes all database rows that start with 'test-' in the primary key of the row.
// 	// This ensures a clean slate for the test run.

// 	dbq, err := db.NewUnsafePostgresDBQueries(true, true)
// 	Expect(err).To(BeNil())

// 	defer dbq.CloseDatabase()

// 	var clusterAccess []db.ClusterAccess
// 	err = dbq.UnsafeListAllClusterAccess(ctx, &clusterAccess)
// 	Expect(err).To(BeNil())

// 	for _, clusterAccess := range clusterAccess {
// 		if clusterAccess.SeqID >= 0 {
// 			_, err := dbq.DeleteClusterAccessById(ctx, clusterAccess.Clusteraccess_user_id,
// 				clusterAccess.Clusteraccess_managed_environment_id,
// 				clusterAccess.Clusteraccess_gitops_engine_instance_id)
// 			Expect(err).To(BeNil())

// 			if err == nil {
// 				Expect(rowsAffected).Should(Equal(1))
// 			}
// 		}
// 	}
// 	// Create a list of gitops engine instance uids that were created by test cases; we
// 	// will later use this to delete old Operations rows, that reference these instances.
// 	gitopsEngineInstanceUIDsToDelete := map[string]any{}
// 	{
// 		var engineInstances []db.GitopsEngineInstance
// 		err = dbq.UnsafeListAllGitopsEngineInstances(ctx, &engineInstances)
// 		Expect(err).To(BeNil())
// 		for _, gitopsEngineInstance := range engineInstances {
// 			if gitopsEngineInstance.SeqID >= 0 {
// 				gitopsEngineInstanceUIDsToDelete[gitopsEngineInstance.Gitopsengineinstance_id] = ""
// 				_, err = dbq.DeleteGitopsEngineInstanceById(ctx, gitopsEngineInstance.Gitopsengineinstance_id)
// 				Expect(err).To(BeNil())
// 			}

// 		}
// 	}

// 	var operations []db.Operation
// 	err = dbq.UnsafeListAllOperations(ctx, &operations)
// 	Expect(err).To(BeNil())

// 	for _, operation := range operations {

// 		// Clean up any operations that reference GitOpsEngineInstance that are going to be deleted below.
// 		_, instanceToBeDeleted := gitopsEngineInstanceUIDsToDelete[operation.Instance_id]

// 		if instanceToBeDeleted {
// 			rowsAffected, err := dbq.CheckedDeleteOperationById(ctx, operation.Operation_id, operation.Operation_owner_user_id)
// 			Expect(rowsAffected).Should(Equal(1))
// 			Expect(err).To(BeNil())

// 		}
// 	}

// 	var deploymentToApplicationMappings []db.DeploymentToApplicationMapping

// 	err = dbq.UnsafeListAllDeploymentToApplicationMapping(ctx, &deploymentToApplicationMappings)
// 	Expect(err).To(BeNil())

// 	for _, deploydeploymentToApplicationMapping := range deploymentToApplicationMappings {
// 		if deploydeploymentToApplicationMapping.SeqID >= 0 {
// 			rowsAffected, err := dbq.DeleteDeploymentToApplicationMappingByDeplId(ctx, deploydeploymentToApplicationMapping.Deploymenttoapplicationmapping_uid_id)
// 			Expect(err).To(BeNil())

// 			if err == nil {
// 				Expect(rowsAffected).Should(Equal(1))
// 			}
// 		}
// 	}

// 	var applications []db.Application
// 	err = dbq.UnsafeListAllApplications(ctx, &applications)
// 	Expect(err).To(BeNil())

// 	for _, application := range applications {
// 		if application.SeqID >= 0 {
// 			rowsAffected, err := dbq.DeleteApplicationById(ctx, application.Application_id)
// 			Expect(err).To(BeNil())
// 			if err == nil {
// 				Expect(rowsAffected).Should(Equal(1))
// 			}
// 		}
// 	}

// 	var engineInstances []GitopsEngineInstance
// 	err = dbq.UnsafeListAllGitopsEngineInstances(ctx, &engineInstances)
// 	Expect(err).To(BeNil())

// 	for _, gitopsEngineInstance := range engineInstances {
// 		if strings.HasPrefix(gitopsEngineInstance.Gitopsengineinstance_id, "test-") || strings.HasPrefix(gitopsEngineInstance.Namespace_name, "test-") {

// 			rowsAffected, err := dbq.DeleteGitopsEngineInstanceById(ctx, gitopsEngineInstance.Gitopsengineinstance_id)

// 			Expect(err).To(BeNil())

// 			if err == nil {
// 				Expect(rowsAffected).Should(Equal(1))
// 			}
// 		}
// 	}

// 	var engineClusters []GitopsEngineCluster
// 	err = dbq.UnsafeListAllGitopsEngineClusters(ctx, &engineClusters)
// 	Expect(err).To(BeNil())

// 	for _, engineCluster := range engineClusters {
// 		if strings.HasPrefix(engineCluster.Gitopsenginecluster_id, "test-") {
// 			rowsAffected, err := dbq.DeleteGitopsEngineClusterById(ctx, engineCluster.Gitopsenginecluster_id)
// 			Expect(err).To(BeNil())

// 			if err == nil {
// 				Expect(rowsAffected).Should(Equal(1))
// 			}
// 		}
// 	}

// 	var managedEnvironments []ManagedEnvironment
// 	err = dbq.UnsafeListAllManagedEnvironments(ctx, &managedEnvironments)
// 	Expect(err).To(BeNil())

// 	for _, managedEnvironment := range managedEnvironments {
// 		if strings.HasPrefix(managedEnvironment.Managedenvironment_id, "test-") {
// 			rowsAffected, err := dbq.DeleteManagedEnvironmentById(ctx, managedEnvironment.Managedenvironment_id)
// 			Expect(rowsAffected).Should(Equal(1))
// 			Expect(err).To(BeNil())
// 		}
// 	}

// 	var clusterCredentials []ClusterCredentials
// 	err = dbq.UnsafeListAllClusterCredentials(ctx, &clusterCredentials)
// 	Expect(err).To(BeNil())

// 	for _, clusterCredential := range clusterCredentials {
// 		if strings.HasPrefix(clusterCredential.Clustercredentials_cred_id, "test-") {
// 			rowsAffected, err := dbq.DeleteClusterCredentialsById(ctx, clusterCredential.Clustercredentials_cred_id)
// 			Expect(err).To(BeNil())

// 			if err == nil {
// 				Expect(rowsAffected).Should(Equal(1))
// 			}
// 		}
// 	}

// 	var clusterUsers []ClusterUser
// 	err = dbq.UnsafeListAllClusterUsers(ctx, &clusterUsers)

// 	if Expect(err).To(BeNil()) {
// 		for _, user := range clusterUsers {
// 			if strings.HasPrefix(user.Clusteruser_id, "test-") {
// 				rowsAffected, err := dbq.DeleteClusterUserById(ctx, user.Clusteruser_id)
// 				Expect(rowsAffected).Should(Equal(1), "expected deletion of "+user.Clusteruser_id+" to succeed.")
// 				Expect(err).To(BeNil())
// 			}
// 		}
// 	}

// 	err = dbq.CreateClusterUser(ctx, testClusterUser)
// 	Expect(err).To(BeNil())

// 	var kubernetesToDBResourceMappings []KubernetesToDBResourceMapping
// 	err = dbq.UnsafeListAllKubernetesResourceToDBResourceMapping(ctx, &kubernetesToDBResourceMappings)
// 	Expect(err).To(BeNil())

// 	for i := range kubernetesToDBResourceMappings {
// 		item := kubernetesToDBResourceMappings[i]

// 		if strings.HasPrefix(item.KubernetesResourceUID, "test-") {
// 			rowsAffected, err := dbq.DeleteKubernetesResourceToDBResourceMapping(ctx, &item)

// 			Expect(err).To(BeNil())
// 			if err == nil {
// 				Expect(rowsAffected).Should(Equal(1))
// 			}
// 		}
// 	}

// 	var apiCRToDatabaseMappings []APICRToDatabaseMapping
// 	err = dbq.UnsafeListAllAPICRToDatabaseMappings(ctx, &apiCRToDatabaseMappings)
// 	Expect(err).To(BeNil())
// 	for idx := range apiCRToDatabaseMappings {
// 		item := apiCRToDatabaseMappings[idx]
// 		if strings.HasPrefix(item.APIResourceUID, "test-") || strings.HasPrefix(item.DBRelationKey, "test-") {
// 			rowsAffected, err := dbq.DeleteAPICRToDatabaseMapping(ctx, &item)
// 			Expect(err).To(BeNil())
// 			if err == nil {
// 				Expect(rowsAffected).Should(Equal(1))
// 			}
// 		}
// 	}

// 	return nil
// 	return nil
// }
